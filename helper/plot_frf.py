#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""Plot periodicity and FRF for the duffing equation. Data generated by
helper/simulate_data.py
"""

import numpy as np
import scipy.io
import matplotlib.pyplot as plt
import os
import sys
sys.path.insert(1, os.path.join(sys.path[0], '..'))

# Perodicity stuff
from signal_cut import periodicity
from common import db
import frf

saveplot = True
forcing = '100'
ftype = 'multisine'
ftype = 'sweep'
abspath =  os.path.dirname(os.path.realpath(sys.argv[0]))
mat = np.load(abspath + '/../data/' + 'duffing_' + ftype + forcing + '.npz')

t = mat['t']
y = mat['y']
dy = mat['dy']
ddy = mat['ddy']
fs = mat['fs']
f1 = mat['f1']
f2 = mat['f2']
nsper = mat['nsper']
nper = mat['nper'].item()
u = mat['u']
print('Number of periods: {:d}'.format(nper))

# Make sure forcing and disp are equal in length. Should be the case now where
# the interpolated force is saved.
if len(u) != len(y):
    diff = len(u) - len(y)
    y = np.append(y,np.zeros(diff))
    print('Appended {:d} zero\'s to y. Len(y): {:d}'.format(diff, len(y)))

# which dof to show:
ido = 0
# don't include first measurement as the first force point is not repeated.
relpath = '/../plots/' + 'duffing_periodicity_' + ftype + forcing
filename = abspath + relpath
periodicity(y[1:], nsper, fs, ido, savefig={'save':saveplot,'fname':filename})

fmin = 5
fmax = 150
def ensure2d(y):
    if y.ndim != 2:
        # recast to 2d-array
        y = y.reshape(-1,y.shape[0])
    return y
# cast to 2d. Format is now y[ndofs,ns]. For 1d cases ndof=0
y = ensure2d(y)
ndof = y.shape[0]

# select periods to include in FRF. Chosen visually from periodicity plot.
# Remember that it is zero-based
per=[0]
per=[3,4]
#per = np.arange(15,20)


if any(p > nper- 1 for p in per):
    raise ValueError('Period too high. Only {} periods in data.'.format(nper),per)

nper = len(per)
ymat = y
umat = u
y = np.empty((ndof, nper*nsper))
u = np.empty(nper*nsper)

# extract periodic signal
for i, p in enumerate(per):
    # remember we dont want first point included
    y[:,i*nsper : (i+1)*nsper] = ymat[:, p*nsper+1 : (p+1)*nsper+1]
    u[i*nsper : (i+1)*nsper] = umat[p*nsper+1 : (p+1)*nsper+1]


for i in range(ndof):
    freq, H1, sigN = frf.periodic(u, y[i,:], nper, fs, fmin, fmax)

    if i == 0:
        H = np.empty((ndof, len(freq)), dtype=complex)
    H[i,:] = H1


H = H[ido,:]

fig1 = plt.figure()
plt.clf()
plt.plot(freq, np.angle(H)/ np.pi * 180 )
plt.title('FRF for dof {}. Periods included {}'.format(ido,nper))
plt.xlabel('Frequency (Hz)')
plt.ylabel('Phase angle (deg)')
#plt.ylim([-180, 180])
plt.yticks(np.linspace(-180,180,360/90))

# Coherence is only calculated for random forcing
# plt.figure()
# plt.clf()
# plt.plot(freq, G2 )
# plt.title('FRF for dof {}'.format(ido))
# plt.xlabel('Frequency (Hz)')
# plt.ylabel('Coherence')

fig2 = plt.figure()
plt.clf()
plt.plot(freq, db(np.abs(H)))
plt.title('FRF for dof {}. Periods included {}'.format(ido,nper))
plt.xlabel('Frequency (Hz)')
# For linear scale: 'Amplitude (m/N)'
plt.ylabel('Amplitude (dB)')

if saveplot:
    relpath = '/../plots/' + 'duffing_frfphase_' + ftype + forcing
    filename = abspath + relpath
    fig1.savefig(filename + '.png')
    fig1.savefig(filename + '.pdf')
    print('plot saved as {}'.format(relpath))
    relpath = '/../plots/' + 'duffing_frfamp_' + ftype + forcing
    filename = abspath + relpath
    fig2.savefig(filename + '.png')
    fig2.savefig(filename + '.pdf')
    print('plot saved as {}'.format(relpath))

plt.show()
